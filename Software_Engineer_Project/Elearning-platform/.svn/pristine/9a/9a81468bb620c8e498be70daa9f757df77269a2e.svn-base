/**
 * 
 */
package da.kang.learning_platform.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionSupport;

import da.kang.learning_platform.AppConstant;
import da.kang.learning_platform.orm.Page;
import da.kang.learning_platform.orm.PropertyFilter;
import da.kang.learning_platform.pojo.LearningGroup;
import da.kang.learning_platform.pojo.Question;
import da.kang.learning_platform.service.LearningGroupManager;
import da.kang.learning_platform.service.QuestionManager;

/**
 * @author zdk
 * 
 */
public class QuestionAction extends ActionSupport {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2315220659500670322L;

	private Question question;
	private LearningGroup learningGroup;
	private LearningGroupManager learningGroupManager;

	private QuestionManager questionManager;

	private Page<Question> page = new Page<Question>(
			AppConstant.DEFAULT_PAGE_SIZE);

	public String list() throws Exception {
		HttpServletRequest request = ServletActionContext.getRequest();
		List<PropertyFilter> filters = PropertyFilter
				.buildFromHttpRequest(request);
		if (!page.isOrderBySetted()) {// 设置默认排序方式
			page.setOrderBy("title");
			page.setOrder(Page.ASC);
		}

		page = questionManager.findPage(page, filters);
		return "list";
	}

	/**
	 * 
	 * 对某个群组,进行查询问题分页
	 * 
	 * @return
	 * @throws Exception
	 */
	public String listForLQroup() throws Exception {
		HttpServletRequest request = ServletActionContext.getRequest();
		List<PropertyFilter> filters = PropertyFilter
				.buildFromHttpRequest(request);
		if (!page.isOrderBySetted()) {// 设置默认排序方式
			page.setOrderBy("title");
			page.setOrder(Page.ASC);
		}
		learningGroup=learningGroupManager.get(learningGroup.getId());
		page = questionManager.findPage(page, filters, learningGroup.getId());
		return "lgroup-discuss_question";
	}

	/**
	 * 
	 * 添加问题
	 * 
	 * @return
	 * @throws Exception
	 */
	public String input() throws Exception {
		learningGroup=question.getLearningGroup();
		questionManager.save(question);
		return listForLQroup();
	}

	public String delete() throws Exception {
		questionManager.delete(question.getId());
		return null;
	}

	public String test() throws Exception {
		return null;
	}

	public Question getQuestion() {
		return question;
	}

	public void setQuestion(Question question) {
		this.question = question;
	}

	public QuestionManager getQuestionManager() {
		return questionManager;
	}

	public void setQuestionManager(QuestionManager questionManager) {
		this.questionManager = questionManager;
	}

	public void setLearningGroup(LearningGroup learningGroup) {
		this.learningGroup = learningGroup;
	}

	public Page<Question> getPage() {
		return page;
	}

	public void setPage(Page<Question> page) {
		this.page = page;
	}

	public LearningGroup getLearningGroup() {
		return learningGroup;
	}

	public void setLearningGroupManager(LearningGroupManager learningGroupManager) {
		this.learningGroupManager = learningGroupManager;
	}

}
